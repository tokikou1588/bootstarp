@namespace BootstrapBlazor.Components
@inherits LayoutBase

<CascadingValue Value="this" IsFixed="true">
    <section @attributes="AdditionalAttributes" class="@ClassString">
        @if (Side == null)
        {
            @RenderHeader.Invoke(false)
            @RenderMain
            @if (ShowFooter)
            {
                @RenderFooter
            }
        }
        else if (IsFullSide)
        {
            <aside class="@SideClassString" style="@SideStyleString">
                @Side
                @if (Menus != null)
                {
                    @RenderMenu.Invoke(IsFullSide)
                }
            </aside>
            <section class="layout-right">
                @RenderHeader.Invoke(ShowCollapseBar)
                @RenderMain
                @if (ShowFooter)
                {
                    @RenderFooter
                }
            </section>
        }
        else
        {
            @RenderHeader.Invoke(ShowCollapseBar);
            <section class="has-sidebar">
                <aside class="@SideClassString" style="@SideStyleString">
                    @Side
                    @if (Menus != null)
                    {
                        @RenderMenu.Invoke(IsFullSide)
                    }
                </aside>
                @RenderMain
            </section>
            @if (ShowFooter)
            {
                @RenderFooter
            }
        }
    </section>
</CascadingValue>

@code {
    RenderFragment<bool> RenderHeader => collapse =>
    @<header class="@HeaderClassString">
        @if (collapse)
        {
            <a title="" data-toggle="tooltip" data-original-title="@TooltipText" class="@CollapseBarClassString" @onclick="@(EventCallback.Factory.Create<MouseEventArgs>(this, e => CollapseMenu()))">
                <i class="fa fa-bars"></i>
            </a>
        }
        @Header
    </header>;

RenderFragment<bool> RenderMenu => hasScroll =>
@<div class="layout-menu">
    @if (hasScroll)
    {
        <Scroll>
            <Menu Items="@Menus" IsVertical="true" IsCollapsed="@IsCollapsed" OnClick="@ClickMenu()" />
        </Scroll>
    }
    else
    {
        <Menu Items="@Menus" IsVertical="true" IsCollapsed="@IsCollapsed" OnClick="@ClickMenu()" />
    }
</div>;

RenderFragment RenderMain =>
@<main class="@MainClassString">
    @if (UseTabSet)
    {
        <RenderTemplate>
            <Tab ClickTabToNavigation="true" ShowExtendButtons="true" ShowClose="true"
                 AdditionalAssemblies="@AdditionalAssemblies" ExcludeUrls="@ExcludeUrls" Body="@(Main!)">
                 <NotAuthorized>
                     @NotAuthorized
                 </NotAuthorized>
            </Tab>
        </RenderTemplate>
    }
    else
    {
        @Main
    }
</main>;

RenderFragment RenderFooter =>
@<footer class="@FooterClassString">
    @Footer
    @if (ShowGotoTop)
    {
        <GoTop />
    }
</footer>;
}
